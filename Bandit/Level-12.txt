The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)

To create the directory and copy the file to your directory, do:
`cd /tmp`
`mkdir <yourName>`
`cd <yourName>`
`cp ~/data.txt .`

The `.` represents your current directory.
According to wikipedia:
In computing, a hex dump is a hexadecimal view (on screen or paper) of computer data, from RAM or from a computer file or storage device. Looking at a hex dump of data is usually done in the context of either debugging or reverse engineering, although it is rare in modern times to need to look at a hex dump while debugging.

In a hex dump, each byte (8-bits) is represented as a two-digit hexadecimal number. Hex dumps are commonly organized into rows of 8 or 16 bytes, sometimes separated by whitespaces. Some hex dumps have the hexadecimal memory address at the beginning and/or a checksum byte at the end of each line. 

Since the file is compressed and is in hex, you will need to use `xxd` to read the hex, `gzip` `bzip2` to decompress, and `tar` to read archives.

Let's try reading the file:
`xxd -r data.txt`

The -r flag means you want to reverse the file. However, the output is still junk we cannot read. Let's output this into a file so we can examine it.

`xxd -r data.txt > data1.txt`

Now, if you do:

`file data1.txt`

It'll show:

data1.txt: gzip compressed data, was "data2.bin", last modified: Tue Oct 16 12:00:23 2018, max compression, from Unix

Well, that means we have to unzip this file. To do that, you must first rename data1.txt into `data1.zip`, because gzip can only expand .zip files.

`mv data1.txt > data1.zip`

Afterwards, to expand the file:

`gzip -d -S .zip data1.zip`

The `-d` flag specifies that we are decompressing a file, and `-S` flag specifies the suffix, `.zip`

Afterwards, if you use `file` to examine the type of file the output is, you'll find it is a `bzip2` file. Do:

`bzip2 -d data1`

Which will spit out `data1.out`. DOing `file data1.out` returns:

data1.out: gzip compressed data, was "data4.bin", last modified: Tue Oct 16 12:00:23 2018, max compression, from Unix

A gzip file again. Decompress that:
`mv data1.out data.zip`
`gzip -d -S .zip data.zip `

Now, if you do `file data`:

data:     POSIX tar archive (GNU)

That means we have to use the `tar` command! Do:

`tar -xf data`

The `-x` flag means it will extract (decompress), and `-f` means you will specify a file. In the end, that returns another tar file. The rest is repition of what we have done before.

Finally, at data9, we have arrived at the ASCII human readable text. `The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL`
